{
  "service": {
    "service": "aws-lambda-padlock-api",
    "serviceObject": {
      "name": "aws-lambda-padlock-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "profile": "deploy-padlock",
      "environment": {
        "dbUser": "dbPadlockAdmin",
        "dbPass": "TqmL1Zs7IOJSRiYa",
        "dbName": "Padlock"
      },
      "lambdaHashingVersion": "20201221",
      "stage": "dev",
      "region": "eu-west-3",
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "NewUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-newUser"
            }
          },
          "GetCurrentUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-getCurrentUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-deleteUser"
            }
          },
          "EditUserEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-editUserEmail"
            }
          },
          "EditUserPassLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-editUserPass"
            }
          },
          "NewServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-newService"
            }
          },
          "GetCurrentServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-getCurrentService"
            }
          },
          "DeleteServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-deleteService"
            }
          },
          "EditServiceNameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-editServiceName"
            }
          },
          "EditServicePassLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-editServicePass"
            }
          },
          "EditServiceBioLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-padlock-api-dev-editServiceBio"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-lambda-padlock-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-padlock-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-padlock-api-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-lambda-padlock-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "NewUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/users.newUser",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-newUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NewUserLogGroup"
            ]
          },
          "GetCurrentUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/users.getCurrentUser",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-getCurrentUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCurrentUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/users.deleteUser",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-deleteUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "EditUserEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/users.editUserEmail",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-editUserEmail",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditUserEmailLogGroup"
            ]
          },
          "EditUserPassLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/users.editUserPass",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-editUserPass",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditUserPassLogGroup"
            ]
          },
          "NewServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/services.newService",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-newService",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NewServiceLogGroup"
            ]
          },
          "GetCurrentServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/services.getCurrentService",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-getCurrentService",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock",
                  "dbUsr": "dbPadlockAdmin",
                  "dbPss": "TqmL1Zs7IOJSRiYa",
                  "dbNm": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCurrentServiceLogGroup"
            ]
          },
          "DeleteServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/services.deleteService",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-deleteService",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteServiceLogGroup"
            ]
          },
          "EditServiceNameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/services.editServiceName",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-editServiceName",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditServiceNameLogGroup"
            ]
          },
          "EditServicePassLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/services.editServicePass",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-editServicePass",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditServicePassLogGroup"
            ]
          },
          "EditServiceBioLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z/aws-lambda-padlock-api.zip"
              },
              "Handler": "Routes/api/services.editServiceBio",
              "Runtime": "nodejs14.x",
              "FunctionName": "aws-lambda-padlock-api-dev-editServiceBio",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "dbPadlockAdmin",
                  "dbPass": "TqmL1Zs7IOJSRiYa",
                  "dbName": "Padlock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditServiceBioLogGroup"
            ]
          },
          "NewUserLambdaVersionMaU0i0E33XP8MIeUCb1W8VhO3K2jnAoKnP7qcDrJH9Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NewUserLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "GetCurrentUserLambdaVersionV2GCNV0pdtmXqpOo0PMfjJiu1MHmMkquzR56j7BvA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCurrentUserLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "DeleteUserLambdaVersion9jhQZ4kk2CTS6xqee9Vifcchssef8dh8RICtLn8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "EditUserEmailLambdaVersionNmWAxKlFIYYaJDzoX5JMm4CXeizmsKcVPtFA74wQs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EditUserEmailLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "EditUserPassLambdaVersionwaygFoRLCgiJYHIzLr4kBGDbMWpGwoMn4z9em6yQw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EditUserPassLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "NewServiceLambdaVersionL2mBon2l2KzzTmoNCROFpD60hoakJNiGsivGXj4ig": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NewServiceLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "GetCurrentServiceLambdaVersionBcxRex4XgKRSIKinqUVQVGMRShTdNvqipvkn8Os5A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCurrentServiceLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "DeleteServiceLambdaVersionjfEtoez6UfexwRfyIpYuQn39vKKbbLFx1vD1wteq34": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteServiceLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "EditServiceNameLambdaVersionIHrYvr7uUDS8A3XeEdOWdHWofgkTr75XuEl9TbFgI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EditServiceNameLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "EditServicePassLambdaVersionkma2mSCFDCu8KerUivqmdy8mi4SAL7C25RL3i72AC0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EditServicePassLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "EditServiceBioLambdaVersionk0ITqc20Tkp329I37o6O4cQfdrD1gTGvogkRjwnC2dQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EditServiceBioLambdaFunction"
              },
              "CodeSha256": "b3ciSMPuMwHjk2j4YDzV2776+xDg7qCcDOw9eASdTHY="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-aws-lambda-padlock-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersNew": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "PathPart": "new",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "PathPart": "{user_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersDelete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "PathPart": "delete",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersDeleteUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsersDelete"
              },
              "PathPart": "{user_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersEmail": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "PathPart": "Email",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersEmailEdit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsersEmail"
              },
              "PathPart": "edit",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersEmailEditEditusereidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsersEmailEdit"
              },
              "PathPart": "{editUserE_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersPass": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "PathPart": "Pass",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersPassEdit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsersPass"
              },
              "PathPart": "edit",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersPassEditEdituserpidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsersPassEdit"
              },
              "PathPart": "{editUserP_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServices": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "services",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesNew": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "new",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesServiceidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "{service_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesDelete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "delete",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesDeleteServiceidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesDelete"
              },
              "PathPart": "{service_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesName": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "name",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesNameEdit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesName"
              },
              "PathPart": "edit",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesNameEditEditservicenidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesNameEdit"
              },
              "PathPart": "{editServiceN_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesPass": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "pass",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesPassEdit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesPass"
              },
              "PathPart": "edit",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesPassEditEditservicepidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesPassEdit"
              },
              "PathPart": "{editServiceP_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesBio": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "bio",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesBioEdit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesBio"
              },
              "PathPart": "edit",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesBioEditEditservicebidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesBioEdit"
              },
              "PathPart": "{editServiceB_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiUsersNewPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersNew"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NewUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiUsersUseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.user_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCurrentUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiUsersDeleteUseridVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {
                "method.request.path.user_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersDeleteUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiUsersEmailEditEditusereidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.editUserE_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersEmailEditEditusereidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EditUserEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiUsersPassEditEdituserpidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.editUserP_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersPassEditEdituserpidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EditUserPassLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiServicesNewPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesNew"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NewServiceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiServicesServiceidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.service_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesServiceidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCurrentServiceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiServicesDeleteServiceidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {
                "method.request.path.service_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesDeleteServiceidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteServiceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiServicesNameEditEditservicenidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.editServiceN_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesNameEditEditservicenidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EditServiceNameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiServicesPassEditEditservicepidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.editServiceP_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesPassEditEditservicepidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EditServicePassLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiServicesBioEditEditservicebidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.editServiceB_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesBioEditEditservicebidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EditServiceBioLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1621442810541": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodApiUsersNewPost",
              "ApiGatewayMethodApiUsersUseridVarGet",
              "ApiGatewayMethodApiUsersDeleteUseridVarDelete",
              "ApiGatewayMethodApiUsersEmailEditEditusereidVarPut",
              "ApiGatewayMethodApiUsersPassEditEdituserpidVarPut",
              "ApiGatewayMethodApiServicesNewPost",
              "ApiGatewayMethodApiServicesServiceidVarGet",
              "ApiGatewayMethodApiServicesDeleteServiceidVarDelete",
              "ApiGatewayMethodApiServicesNameEditEditservicenidVarPut",
              "ApiGatewayMethodApiServicesPassEditEditservicepidVarPut",
              "ApiGatewayMethodApiServicesBioEditEditservicebidVarPut"
            ]
          },
          "NewUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NewUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCurrentUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCurrentUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EditUserEmailLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EditUserEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EditUserPassLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EditUserPassLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "NewServiceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NewServiceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCurrentServiceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCurrentServiceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteServiceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteServiceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EditServiceNameLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EditServiceNameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EditServicePassLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EditServicePassLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EditServiceBioLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EditServiceBioLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "NewUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NewUserLambdaVersionMaU0i0E33XP8MIeUCb1W8VhO3K2jnAoKnP7qcDrJH9Q"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-NewUserLambdaFunctionQualifiedArn"
            }
          },
          "GetCurrentUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCurrentUserLambdaVersionV2GCNV0pdtmXqpOo0PMfjJiu1MHmMkquzR56j7BvA"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-GetCurrentUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersion9jhQZ4kk2CTS6xqee9Vifcchssef8dh8RICtLn8"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "EditUserEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EditUserEmailLambdaVersionNmWAxKlFIYYaJDzoX5JMm4CXeizmsKcVPtFA74wQs"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-EditUserEmailLambdaFunctionQualifiedArn"
            }
          },
          "EditUserPassLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EditUserPassLambdaVersionwaygFoRLCgiJYHIzLr4kBGDbMWpGwoMn4z9em6yQw"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-EditUserPassLambdaFunctionQualifiedArn"
            }
          },
          "NewServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NewServiceLambdaVersionL2mBon2l2KzzTmoNCROFpD60hoakJNiGsivGXj4ig"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-NewServiceLambdaFunctionQualifiedArn"
            }
          },
          "GetCurrentServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCurrentServiceLambdaVersionBcxRex4XgKRSIKinqUVQVGMRShTdNvqipvkn8Os5A"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-GetCurrentServiceLambdaFunctionQualifiedArn"
            }
          },
          "DeleteServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteServiceLambdaVersionjfEtoez6UfexwRfyIpYuQn39vKKbbLFx1vD1wteq34"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-DeleteServiceLambdaFunctionQualifiedArn"
            }
          },
          "EditServiceNameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EditServiceNameLambdaVersionIHrYvr7uUDS8A3XeEdOWdHWofgkTr75XuEl9TbFgI"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-EditServiceNameLambdaFunctionQualifiedArn"
            }
          },
          "EditServicePassLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EditServicePassLambdaVersionkma2mSCFDCu8KerUivqmdy8mi4SAL7C25RL3i72AC0"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-EditServicePassLambdaFunctionQualifiedArn"
            }
          },
          "EditServiceBioLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EditServiceBioLambdaVersionk0ITqc20Tkp329I37o6O4cQfdrD1gTGvogkRjwnC2dQ"
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-EditServiceBioLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-lambda-padlock-api-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "newUser": {
        "handler": "Routes/api/users.newUser",
        "events": [
          {
            "http": {
              "path": "api/users/new",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-newUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "NewUserLambdaVersionMaU0i0E33XP8MIeUCb1W8VhO3K2jnAoKnP7qcDrJH9Q"
      },
      "getCurrentUser": {
        "handler": "Routes/api/users.getCurrentUser",
        "events": [
          {
            "http": {
              "path": "api/users/{user_id}",
              "request": {
                "parameters": {
                  "method.request.path.user_id": true
                }
              },
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-getCurrentUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetCurrentUserLambdaVersionV2GCNV0pdtmXqpOo0PMfjJiu1MHmMkquzR56j7BvA"
      },
      "deleteUser": {
        "handler": "Routes/api/users.deleteUser",
        "events": [
          {
            "http": {
              "path": "api/users/delete/{user_id}",
              "request": {
                "parameters": {
                  "method.request.path.user_id": true
                }
              },
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-deleteUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersion9jhQZ4kk2CTS6xqee9Vifcchssef8dh8RICtLn8"
      },
      "editUserEmail": {
        "handler": "Routes/api/users.editUserEmail",
        "events": [
          {
            "http": {
              "path": "api/users/Email/edit/{editUserE_id}",
              "request": {
                "parameters": {
                  "method.request.path.editUserE_id": true
                }
              },
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-editUserEmail",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EditUserEmailLambdaVersionNmWAxKlFIYYaJDzoX5JMm4CXeizmsKcVPtFA74wQs"
      },
      "editUserPass": {
        "handler": "Routes/api/users.editUserPass",
        "events": [
          {
            "http": {
              "path": "api/users/Pass/edit/{editUserP_id}",
              "request": {
                "parameters": {
                  "method.request.path.editUserP_id": true
                }
              },
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-editUserPass",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EditUserPassLambdaVersionwaygFoRLCgiJYHIzLr4kBGDbMWpGwoMn4z9em6yQw"
      },
      "newService": {
        "handler": "Routes/api/services.newService",
        "events": [
          {
            "http": {
              "path": "api/services/new",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-newService",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "NewServiceLambdaVersionL2mBon2l2KzzTmoNCROFpD60hoakJNiGsivGXj4ig"
      },
      "getCurrentService": {
        "handler": "Routes/api/services.getCurrentService",
        "environment": {
          "dbUsr": "dbPadlockAdmin",
          "dbPss": "TqmL1Zs7IOJSRiYa",
          "dbNm": "Padlock"
        },
        "events": [
          {
            "http": {
              "path": "api/services/{service_id}",
              "request": {
                "parameters": {
                  "method.request.path.service_id": true
                }
              },
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-getCurrentService",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetCurrentServiceLambdaVersionBcxRex4XgKRSIKinqUVQVGMRShTdNvqipvkn8Os5A"
      },
      "deleteService": {
        "handler": "Routes/api/services.deleteService",
        "events": [
          {
            "http": {
              "path": "api/services/delete/{service_id}",
              "request": {
                "parameters": {
                  "method.request.path.service_id": true
                }
              },
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-deleteService",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteServiceLambdaVersionjfEtoez6UfexwRfyIpYuQn39vKKbbLFx1vD1wteq34"
      },
      "editServiceName": {
        "handler": "Routes/api/services.editServiceName",
        "events": [
          {
            "http": {
              "path": "api/services/name/edit/{editServiceN_id}",
              "request": {
                "parameters": {
                  "method.request.path.editServiceN_id": true
                }
              },
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-editServiceName",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EditServiceNameLambdaVersionIHrYvr7uUDS8A3XeEdOWdHWofgkTr75XuEl9TbFgI"
      },
      "editServicePass": {
        "handler": "Routes/api/services.editServicePass",
        "events": [
          {
            "http": {
              "path": "api/services/pass/edit/{editServiceP_id}",
              "request": {
                "parameters": {
                  "method.request.path.editServiceP_id": true
                }
              },
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-editServicePass",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EditServicePassLambdaVersionkma2mSCFDCu8KerUivqmdy8mi4SAL7C25RL3i72AC0"
      },
      "editServiceBio": {
        "handler": "Routes/api/services.editServiceBio",
        "events": [
          {
            "http": {
              "path": "api/services/bio/edit/{editServiceB_id}",
              "request": {
                "parameters": {
                  "method.request.path.editServiceB_id": true
                }
              },
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-lambda-padlock-api-dev-editServiceBio",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EditServiceBioLambdaVersionk0ITqc20Tkp329I37o6O4cQfdrD1gTGvogkRjwnC2dQ"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "E:\\1PROGRAMMING\\Padlock-VersionControl\\aws-lambda-padlock-api\\.serverless\\aws-lambda-padlock-api.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/aws-lambda-padlock-api/dev/1621442816573-2021-05-19T16:46:56.573Z",
    "artifact": "aws-lambda-padlock-api.zip"
  }
}