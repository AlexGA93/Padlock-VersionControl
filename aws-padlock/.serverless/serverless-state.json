{
  "service": {
    "service": "aws-padlock",
    "serviceObject": {
      "name": "aws-padlock"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "lambdaHashingVersion": "20201221",
      "stage": "dev",
      "profile": "user-padlock",
      "region": "eu-west-3",
      "environment": {
        "dbUser": "Alex",
        "dbPass": "AGCNknjp7PVUDSVx",
        "dbName": "PadlockCluster",
        "dbTest": "PADLOCK"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "PadlockLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-padlock"
            }
          },
          "GetUserByTokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-getUserByToken"
            }
          },
          "AuthenticateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-authenticateUser"
            }
          },
          "SignupUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-signupUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-deleteUser"
            }
          },
          "NewServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-newService"
            }
          },
          "GetServiceByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-getServiceById"
            }
          },
          "DeleteServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-deleteService"
            }
          },
          "ChangeServiceNameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-changeServiceName"
            }
          },
          "ChangeServicePassLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-changeServicePass"
            }
          },
          "ChangeServiceBioLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-padlock-dev-changeServiceBio"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-padlock",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-padlock-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-padlock-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-padlock",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "PadlockLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "handler.padlock",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-padlock",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PadlockLogGroup"
            ]
          },
          "GetUserByTokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/auth.getUserByToken",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-getUserByToken",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserByTokenLogGroup"
            ]
          },
          "AuthenticateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/auth.authenticateUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-authenticateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthenticateUserLogGroup"
            ]
          },
          "SignupUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/users.signupUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-signupUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignupUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/users.deleteUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-deleteUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "NewServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/services.newService",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-newService",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NewServiceLogGroup"
            ]
          },
          "GetServiceByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/services.getServiceById",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-getServiceById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetServiceByIdLogGroup"
            ]
          },
          "DeleteServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/services.deleteService",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-deleteService",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteServiceLogGroup"
            ]
          },
          "ChangeServiceNameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/services.changeServiceName",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-changeServiceName",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChangeServiceNameLogGroup"
            ]
          },
          "ChangeServicePassLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/services.changeServicePass",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-changeServicePass",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChangeServicePassLogGroup"
            ]
          },
          "ChangeServiceBioLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z/aws-padlock.zip"
              },
              "Handler": "Routes/api/services.changeServiceBio",
              "Runtime": "nodejs12.x",
              "FunctionName": "aws-padlock-dev-changeServiceBio",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "dbUser": "Alex",
                  "dbPass": "AGCNknjp7PVUDSVx",
                  "dbName": "PadlockCluster",
                  "dbTest": "PADLOCK"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChangeServiceBioLogGroup"
            ]
          },
          "PadlockLambdaVersionBDEDRFkV04fEracyrBqtfbXDPYD6bRNeqXBevaGWgs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PadlockLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "GetUserByTokenLambdaVersion85aFSSDQaOhfT4ny2p7L11488HdwFN0IVVR1GAhs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserByTokenLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "AuthenticateUserLambdaVersionwAikFdDR1WDVHjG2pgxU6WzwfGhLHghzRpmHjLIz8k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthenticateUserLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "SignupUserLambdaVersionge0POmHwXr6uunQ3m1AMmbGZdl6oLBQyYmexiH7PcQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignupUserLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "DeleteUserLambdaVersionYkR3QyYZbjDBGXgLOciqkHbdRBeMNvkTlDG1TvPs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "NewServiceLambdaVersion5kuYAQR6mtlMuKFsso9aEkOWGSnELVzJtrP3MM110o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NewServiceLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "GetServiceByIdLambdaVersionoBkKYptNARpQlf9pAkD17MQdtQ1eTjMimZ37R37jPs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetServiceByIdLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "DeleteServiceLambdaVersionPr0wsVGRS9k4B49bBIri0YppgniVkyT34umQpofxxI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteServiceLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "ChangeServiceNameLambdaVersionEWOeylrww1gdnVnutmqGOp78fzDIZxLjlG3PT9eCI64": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChangeServiceNameLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "ChangeServicePassLambdaVersionpto4dDe3i6Dw88jF8BUnzykaz28uYr0M8dggfwwKATA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChangeServicePassLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "ChangeServiceBioLambdaVersionjNIEYM6EOz4rrX4iNXvYT2MmqwupPXO4xRrXnHaHw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChangeServiceBioLambdaFunction"
              },
              "CodeSha256": "g2/9xfL6s1npOLruj7ki/2lpG6jkHK5U9OCsrPMFcmI="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-aws-padlock",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourcePadlock": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "padlock",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersSignup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "PathPart": "signup",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersDelete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "PathPart": "delete",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServices": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "services",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesServiceidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "{service_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesDelete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "delete",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesDeleteServiceidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesDelete"
              },
              "PathPart": "{service_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesName": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "name",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesNameEditservicenidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesName"
              },
              "PathPart": "{editServiceN_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesPass": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "pass",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesPassEditservicepidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesPass"
              },
              "PathPart": "{editServiceP_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesBio": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "PathPart": "bio",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiServicesBioEditservicebidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiServicesBio"
              },
              "PathPart": "{editServiceB_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPadlockGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePadlock"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PadlockLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "PadlockLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiAuthGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserByTokenLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserByTokenLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiAuthPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthenticateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthenticateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUsersSignupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersSignup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignupUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SignupUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUsersDeleteDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersDelete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiServicesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServices"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NewServiceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "NewServiceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiServicesServiceidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesServiceidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetServiceByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetServiceByIdLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiServicesDeleteServiceidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesDeleteServiceidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteServiceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteServiceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiServicesNameEditservicenidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesNameEditservicenidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ChangeServiceNameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ChangeServiceNameLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiServicesPassEditservicepidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesPassEditservicepidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ChangeServicePassLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ChangeServicePassLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiServicesBioEditservicebidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiServicesBioEditservicebidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ChangeServiceBioLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ChangeServiceBioLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1630599999242": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodPadlockGet",
              "ApiGatewayMethodApiAuthGet",
              "ApiGatewayMethodApiAuthPost",
              "ApiGatewayMethodApiUsersSignupPost",
              "ApiGatewayMethodApiUsersDeleteDelete",
              "ApiGatewayMethodApiServicesPost",
              "ApiGatewayMethodApiServicesServiceidVarGet",
              "ApiGatewayMethodApiServicesDeleteServiceidVarDelete",
              "ApiGatewayMethodApiServicesNameEditservicenidVarPut",
              "ApiGatewayMethodApiServicesPassEditservicepidVarPut",
              "ApiGatewayMethodApiServicesBioEditservicebidVarPut"
            ]
          },
          "PadlockLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PadlockLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserByTokenLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserByTokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthenticateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthenticateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignupUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignupUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "NewServiceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NewServiceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetServiceByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetServiceByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteServiceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteServiceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ChangeServiceNameLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChangeServiceNameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ChangeServicePassLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChangeServicePassLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ChangeServiceBioLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChangeServiceBioLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-ServerlessDeploymentBucketName"
            }
          },
          "PadlockLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PadlockLambdaVersionBDEDRFkV04fEracyrBqtfbXDPYD6bRNeqXBevaGWgs"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-PadlockLambdaFunctionQualifiedArn"
            }
          },
          "GetUserByTokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserByTokenLambdaVersion85aFSSDQaOhfT4ny2p7L11488HdwFN0IVVR1GAhs"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-GetUserByTokenLambdaFunctionQualifiedArn"
            }
          },
          "AuthenticateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthenticateUserLambdaVersionwAikFdDR1WDVHjG2pgxU6WzwfGhLHghzRpmHjLIz8k"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-AuthenticateUserLambdaFunctionQualifiedArn"
            }
          },
          "SignupUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignupUserLambdaVersionge0POmHwXr6uunQ3m1AMmbGZdl6oLBQyYmexiH7PcQ"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-SignupUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionYkR3QyYZbjDBGXgLOciqkHbdRBeMNvkTlDG1TvPs"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "NewServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NewServiceLambdaVersion5kuYAQR6mtlMuKFsso9aEkOWGSnELVzJtrP3MM110o"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-NewServiceLambdaFunctionQualifiedArn"
            }
          },
          "GetServiceByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetServiceByIdLambdaVersionoBkKYptNARpQlf9pAkD17MQdtQ1eTjMimZ37R37jPs"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-GetServiceByIdLambdaFunctionQualifiedArn"
            }
          },
          "DeleteServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteServiceLambdaVersionPr0wsVGRS9k4B49bBIri0YppgniVkyT34umQpofxxI"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-DeleteServiceLambdaFunctionQualifiedArn"
            }
          },
          "ChangeServiceNameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChangeServiceNameLambdaVersionEWOeylrww1gdnVnutmqGOp78fzDIZxLjlG3PT9eCI64"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-ChangeServiceNameLambdaFunctionQualifiedArn"
            }
          },
          "ChangeServicePassLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChangeServicePassLambdaVersionpto4dDe3i6Dw88jF8BUnzykaz28uYr0M8dggfwwKATA"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-ChangeServicePassLambdaFunctionQualifiedArn"
            }
          },
          "ChangeServiceBioLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChangeServiceBioLambdaVersionjNIEYM6EOz4rrX4iNXvYT2MmqwupPXO4xRrXnHaHw"
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-ChangeServiceBioLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-padlock-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "padlock": {
        "handler": "handler.padlock",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "padlock",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-padlock",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "PadlockLambdaVersionBDEDRFkV04fEracyrBqtfbXDPYD6bRNeqXBevaGWgs"
      },
      "getUserByToken": {
        "handler": "Routes/api/auth.getUserByToken",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "api/auth",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-getUserByToken",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUserByTokenLambdaVersion85aFSSDQaOhfT4ny2p7L11488HdwFN0IVVR1GAhs"
      },
      "authenticateUser": {
        "handler": "Routes/api/auth.authenticateUser",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "api/auth",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-authenticateUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AuthenticateUserLambdaVersionwAikFdDR1WDVHjG2pgxU6WzwfGhLHghzRpmHjLIz8k"
      },
      "signupUser": {
        "handler": "Routes/api/users.signupUser",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "api/users/signup",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-signupUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "SignupUserLambdaVersionge0POmHwXr6uunQ3m1AMmbGZdl6oLBQyYmexiH7PcQ"
      },
      "deleteUser": {
        "handler": "Routes/api/users.deleteUser",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "api/users/delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-deleteUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersionYkR3QyYZbjDBGXgLOciqkHbdRBeMNvkTlDG1TvPs"
      },
      "newService": {
        "handler": "Routes/api/services.newService",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "api/services",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-newService",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "NewServiceLambdaVersion5kuYAQR6mtlMuKFsso9aEkOWGSnELVzJtrP3MM110o"
      },
      "getServiceById": {
        "handler": "Routes/api/services.getServiceById",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "api/services/{service_id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-getServiceById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetServiceByIdLambdaVersionoBkKYptNARpQlf9pAkD17MQdtQ1eTjMimZ37R37jPs"
      },
      "deleteService": {
        "handler": "Routes/api/services.deleteService",
        "events": [
          {
            "http": {
              "method": "delete",
              "path": "api/services/delete/{service_id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-deleteService",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteServiceLambdaVersionPr0wsVGRS9k4B49bBIri0YppgniVkyT34umQpofxxI"
      },
      "changeServiceName": {
        "handler": "Routes/api/services.changeServiceName",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "api/services/name/{editServiceN_id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-changeServiceName",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ChangeServiceNameLambdaVersionEWOeylrww1gdnVnutmqGOp78fzDIZxLjlG3PT9eCI64"
      },
      "changeServicePass": {
        "handler": "Routes/api/services.changeServicePass",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "api/services/pass/{editServiceP_id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-changeServicePass",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ChangeServicePassLambdaVersionpto4dDe3i6Dw88jF8BUnzykaz28uYr0M8dggfwwKATA"
      },
      "changeServiceBio": {
        "handler": "Routes/api/services.changeServiceBio",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "api/services/bio/{editServiceB_id}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aws-padlock-dev-changeServiceBio",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ChangeServiceBioLambdaVersionjNIEYM6EOz4rrX4iNXvYT2MmqwupPXO4xRrXnHaHw"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/home/elros/Desktop/Programming/MERN/Padlock_new_back/Padlock-VersionControl/aws-padlock/.serverless/aws-padlock.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/aws-padlock/dev/1630600001963-2021-09-02T16:26:41.963Z",
    "artifact": "aws-padlock.zip"
  }
}